{"version":3,"sources":["webpack:///webpack/bootstrap d697e77d309381b66213","webpack:///./src/SoundModule/Effector.js","webpack:///./src/SoundModule/index.js","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/index.js","webpack:///./src/main.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Compressor.js","webpack:///./src/SoundModule/Distortion.js","webpack:///./src/SoundModule/Wah.js","webpack:///./src/SoundModule/Equalizer.js","webpack:///./src/SoundModule/Filter.js","webpack:///./src/SoundModule/Autopanner.js","webpack:///./src/SoundModule/AutopannerFallback.js","webpack:///./src/SoundModule/Tremolo.js","webpack:///./src/SoundModule/Ringmodulator.js","webpack:///./src/SoundModule/Phaser.js","webpack:///./src/SoundModule/Flanger.js","webpack:///./src/SoundModule/Chorus.js","webpack:///./src/SoundModule/Delay.js","webpack:///./src/SoundModule/Reverb.js","webpack:///./src/SoundModule/Panner.js","webpack:///./src/SoundModule/Listener.js","webpack:///./src/SoundModule/EnvelopeGenerator.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/MixerModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Effector","context","bufferSize","_classCallCheck","this","isActive","input","createGain","output","lfo","createOscillator","depth","rate","frequency","processor","createScriptProcessor","start","noteOn","stop","noteOff","values","isStop","startTime","parseFloat","isNaN","currentTime","stopTime","releaseTime","r","type","value","state","undefined","String","toLowerCase","Boolean","connect","JSON","stringify","params","SoundModule","sampleRate","userAgent","navigator","parseInt","test","mastervolume","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","analyser","_Analyser2","default","recorder","_Recorder2","session","_Session2","compressor","_Compressor2","distortion","_Distortion2","wah","_Wah2","equalizer","_Equalizer2","filter","_Filter2","tremolo","_Tremolo2","ringmodulator","_Ringmodulator2","autopanner","createStereoPanner","_Autopanner2","_AutopannerFallback2","phaser","_Phaser2","flanger","_Flanger2","chorus","_Chorus2","delay","_Delay2","reverb","_Reverb2","panner","_Panner2","listener","_Listener2","envelopegenerator","_EnvelopeGenerator2","key","v","min","max","replace","gain","minValue","maxValue","source","connects","Array","isArray","disconnect","length","len","destination","sender","toString","Visualizer","graphics","canvas","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","setAttribute","XMLNS","XLINK","k","isError","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","grads","err","return","prop","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","w","h","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","x","Math","floor","y","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","gradients","addColorStop","fillRect","linearGradientId","path","document","createElementNS","defs","createSVGLinearGradient","g","appendChild","rect","linearGradient","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_styles$font","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","SVG_LINEAR_GRADIENT_ID_TIME","SVG_LINEAR_GRADIENT_ID_FFT","OscillatorModule","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","sources","times","isAnalyser","glide","_Glide2","states","_Oscillator2","setGenerator","arguments","param","st","sp","clear","frequencies","processCallback","_this2","f","onaudioprocess","oscillator","ready","volume","on","event","inputLs","inputBuffer","getChannelData","inputRs","outputLs","outputBuffer","outputRs","off","set","index","time","octave","fine","OneshotModule","resources","buffers","volumes","isStops","settings","transpose","timeout","successCallback","errorCallback","progressCallback","properties","success","error","progress","buffer","loop","end","t","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogress","abort","onerror","ERROR_AJAX","onload","status","arrayBuffer","response","ArrayBuffer","decodeSuccessCallback","audioBuffer","decodeErrorCallback","ERROR_DECODE","decodeAudioData","open","responseType","send","AudioBuffer","_this3","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","window","setTimeout","onended","every","oneshot","AudioModule","paused","callbacks","decode","update","ended","vocalcanceler","_VocalCanceler2","setup","duration","numberOfChannels","position","pos","timeOverviewL","timeOverviewR","audio","playbackrate","MediaModule","media","ext","controls","muted","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","Error","addEventListener","MediaElementAudioSourceNode","createMediaElementSource","loadstart","loadedmetadata","pause","HTMLMediaElement","channelCount","src","indexOf","play","StreamModule","constraints","video","stream","noisegate","_NoiseGate2","streamCallback","mediaDevices","getUserMedia","createMediaStreamSource","then","catch","isStreaming","level","_XSound","AudioContext","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelay","createDelayNode","createPeriodicWave","createWaveTable","_OscillatorModule2","_OneshotModule2","_AudioModule2","_MediaModule2","_StreamModule2","mixer","_MixerModule2","midi","_MIDI2","mml","_MML2","XSound","SAMPLE_RATE","_SoundModule2","read","file","ajax","toFrequencies","convertTime","fullscreen","exitFullscreen","clone","clones","C","free","sourceList","noConflict","deep","X","getCurrentTime","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","createAnalyser","_TimeOverview2","_Time2","fft","_FFT2","fftSize","smoothingTimeConstant","frequencyBinCount","domain","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","slice","toUpperCase","TimeOverview","savedImage","plotInterval","textInterval","_canvas","height","nTextInterval","clearRect","drawTimeDomainFloat32ArrayOnCanvas","createFontString","fillText","measureText","texts","trim","getImageData","getAttribute","innerHTML","drawTimeDomainFloat32ArrayBySVG","_Visualizer3","textContent","ImageData","_canvas2","putImageData","querySelector","drawNode","move","isDown","draw","getOffsetX","preventDefault","offsetX","offsetLeft","parentNode","pageX","touches","Time","UINT","FLOAT","FFT","mindB","maxdB","range","drawnSize","fsDivN","abs","Recorder","numberOfInputs","numberOfOutputs","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","gainL","gainR","track","isTrack","recordedLs","recordedRs","push","channel","tracks","mixes","sum","num","currentBuffer","numberOfMaxBuffers","currentTrack","mixTrack","qbit","soundLs","soundRs","mix","CHANNEL","QBIT","SIZE","sounds","binary","pow","Int16Array","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","URL","webkitURL","mozURL","createObjectURL","waves","blob","Blob","fromCharCode","dataURL","btoa","Session","receiver","websocket","tls","host","port","openCallback","closeCallback","onLine","close","scheme","charAt","WebSocket","binaryType","onopen","onclose","onmessage","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","isConnected","bufferedAmount","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","minValues","maxValues","Distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","numberOfSamples","BANDPASS","Q","SQRT1_2","LOWPASS","curve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","createCurve","samples","amount","curves","Wah","lowpass","depthRate","_get","cutoff","resonance","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","highpass","HIGHPASS","bandpass","lowshelf","highshelf","peaking","notch","NOTCH","allpass","ALLPASS","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","Autopanner","pan","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo","amplitude","WAVE_TYPE","sine","SINE","square","SQUARE","sawtooth","SAWTOOTH","triangle","TRIANGLE","Ringmodulator","Phaser","numberOfStages","filters","MAXIMUM_STAGES","feedback","stage","Flanger","delayTime","Chorus","Delay","MAX_DELAY_TIME","dry","wet","Reverb","rirs","convolver","createConvolver","impulse","onprogresss","self","Panner","createPanner","positions","z","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","setPosition","setOrientation","PANNING_MODELS","equalpower","EQUALPOWER","DISTANCE_MODELS","linear","LINEAR_DISTANCE","inverse","exponential","EXPONENTIAL_DISTANCE","Listener","fronts","ups","EnvelopeGenerator","generators","activeIndexes","activeCounter","activeIndex","counter","MIN_GAIN","isDisconnect","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","generator","Oscillator","setPeriodicWave","setWaveTable","customs","real","imag","reals","imags","subarray","periodicWave","detune","Glide","LINEAR","LINEARY","EXPONENTIAL","diff","VocalCanceler","dataL","dataR","NoiseGate","MixerModule","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","indexes","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","j","node","AudioNode","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","isPaused","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","toAscii","computedIndex","FREQUENCY_RATIO","string","converted","charCode","charCodeAt","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","Event","stopPropagation","dataTransfer","files","target","File","minutes","seconds","milliseconds","Element","webkitRequestFullscreen","ALLOW_KEYBOARD_INPUT","mozRequestFullScreen","msRequestFullscreen","requestFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d697e77d309381b66213","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport default class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts Effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of OscillatorNode again in the case of false.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of OscillatorNode\n            this.lfo.stop(s + r);\n\n            // Create the instance of OscillatorNode again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        } else if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Effector.js","'use strict';\n\nimport Analyser from './Analyser';\nimport Recorder from './Recorder';\nimport Session from './Session';\nimport Compressor from './Compressor';\nimport Distortion from './Distortion';\nimport Wah from './Wah';\nimport Equalizer from './Equalizer';\nimport Filter from './Filter';\nimport Autopanner from './Autopanner';\nimport AutopannerFallback from './AutopannerFallback';\nimport Tremolo from './Tremolo';\nimport Ringmodulator from './Ringmodulator';\nimport Phaser from './Phaser';\nimport Flanger from './Flanger';\nimport Chorus from './Chorus';\nimport Delay from './Delay';\nimport Reverb from './Reverb';\nimport Panner from './Panner';\nimport Listener from './Listener';\nimport EnvelopeGenerator from './EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in \"xsound.js\".\n * This library's users do not create the instance of SoundModule.\n * This class is used for inherit in subclass (OscillatorModule, OneshotModule, AudioModule, MediaModule, StreamModule, MixerModule).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport default class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of SoundModule selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling \"resize\" method.\n     */\n    constructor(context, bufferSize) {\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        let userAgent = navigator.userAgent;\n\n        if (bufferSize !== undefined) {\n            switch (parseInt(bufferSize, 10)) {\n                case   256:\n                case   512:\n                case  1024:\n                case  2048:\n                case  4096:\n                case  8192:\n                case 16384:\n                    this.bufferSize = parseInt(bufferSize, 10);\n                    break;\n                default:\n                    return;\n            }\n        } else if (/(Win(dows )?NT 6\\.2)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 8\n        } else if (/(Win(dows )?NT 6\\.1)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 7\n        } else if (/(Win(dows )?NT 6\\.0)/.test(userAgent)) {\n            this.bufferSize = 2048;  // Windows Vista\n        } else if (/Win(dows )?(NT 5\\.1|XP)/.test(userAgent)) {\n            this.bufferSize = 4096;  // Windows XP\n        } else if (/Mac|PPC/.test(userAgent)) {\n            this.bufferSize = 1024;  // Mac OS X\n        } else if (/Linux/.test(userAgent)) {\n            this.bufferSize = 8192;  // Linux\n        } else if (/iPhone|iPad|iPod/.test(userAgent)) {\n            this.bufferSize = 2048;  // iOS\n        } else {\n            this.bufferSize = 16384;  // Otherwise\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser = new Analyser(context);\n        this.recorder = new Recorder(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session  = new Session(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor    = new Compressor(context, this.bufferSize);\n        this.distortion    = new Distortion(context, this.bufferSize);\n        this.wah           = new Wah(context, this.bufferSize);\n        this.equalizer     = new Equalizer(context, this.bufferSize);\n        this.filter        = new Filter(context, this.bufferSize);\n        this.tremolo       = new Tremolo(context, this.bufferSize);\n        this.ringmodulator = new Ringmodulator(context, this.bufferSize);\n        this.autopanner    = context.createStereoPanner ? new Autopanner(context, this.bufferSize) : new AutopannerFallback(context, this.bufferSize);\n        this.phaser        = new Phaser(context, this.bufferSize);\n        this.flanger       = new Flanger(context, this.bufferSize);\n        this.chorus        = new Chorus(context, this.bufferSize);\n        this.delay         = new Delay(context, this.bufferSize);\n        this.reverb        = new Reverb(context, this.bufferSize);\n        this.panner        = new Panner(context, this.bufferSize);\n        this.listener      = new Listener(context);\n\n        // for OscillatorModule, OneshotModule\n        this.envelopegenerator = new EnvelopeGenerator(context);\n\n        // The default order for connection\n        this.modules = [\n            this.panner,\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = this.mastervolume.gain.minValue || 0;\n                max = this.mastervolume.gain.maxValue || 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for ScriptProcessorNode and invokes constructor again.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        new SoundModule(this.context, bufferSize);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for ScriptProcessorNode.\n     * @return {number} This is returned as buffer size for ScriptProcessorNode.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is AudioNode for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode (analyser) -> AudioDestinationNode (output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.analyser.input);\n        this.analyser.output.connect(this.context.destination);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Listener|Analyser|Recorder|Session|Effector|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'listener'     :\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'autopanner'   :\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                // OscillatorModule, OneshotModule\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/index.js","'use strict';\n\n/**\n * This private class defines the properties that subclasses (TimeOverview, Time, FFT) require.\n * @constructor\n */\nexport default class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using HTML5 Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using HTML5 SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either HTMLCanvasElement or SVGElement.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for Data URL or HTML for the drawn figure.\n     * @return {string|Visualizer} This is returned as Data URL or HTML string. If \"setup\" method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of Float32Array to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of CanvasRenderingContext2D.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = -1 * Math.floor(data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of Float32Array to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for SVGLinearGradientElement.\n     * @return {SVGPathElement|SVGGElement} This is returned as SVGElement.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor(data[i] * (innerHeight / 2));\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for SVGLinearGradientElement.\n     * @return {SVGDefsElement} This is returned as the instance of SVGDefsElement.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/Visualizer.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport Oscillator from './Oscillator';\nimport Glide from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (Oscillator).\n * Therefore, This class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of Oscillator.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of Oscillator.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        if (st >=  0) {this.times.start = st;} else {this.times.start = 0;}\n        if (sp >= st) {this.times.stop  = sp;} else {this.times.stop  = 0;}\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop onaudioprocess event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of Oscillator that is used in OscillatorModule.\n     * @param {number} index This argument is required in the case of designating Oscillator.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        if ((i >= 0) && (i < this.sources.length)) {\n            return this.sources[i];\n        } else {\n            return this.sources;\n        }\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OscillatorModule/index.js","'use strict';\n\nimport SoundModule from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate \"start\" or \"stop\" method in the instance of AudioBufferSourceNode */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * Class (Static) properties\n     */\n\n    /**\n     * This method creates the instances of AudioBuffer by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of AudioBuffer for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return;\n                }\n            } else {\n                return;\n            }\n\n            settings[i].rate = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of XMLHttpRequest.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get ArrayBuffer by Ajax -> Create the instances of AudioBuffer\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of AudioBuffer has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of AudioBuffer from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of AudioBuffer directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n\n                    if (v > min) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        if (st >=  0) {this.times.start = st;} else {this.times.start = 0;}\n        if (sp >= st) {this.times.stop  = sp;} else {this.times.stop  = 0;}\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of AudioBufferSourceNode.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // \"setup\" method has not been invoked\n            return;\n        }\n\n        // the instance of AudioBufferSourceNode already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        source.start(startTime);\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop onaudioprocess event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of AudioBufferSourceNode.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of AudioBuffer that is used in OneshotModule.\n     * @param {number} index This argument is required in the case of designating AudioBuffer.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        if ((i >= 0) && (i < this.buffers.length)) {\n            return this.buffers[i];\n        } else {\n            return this.buffers;\n        }\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OneshotModule/index.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport VocalCanceler from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than HTML5 audio.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use OneshotModule.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = context.createBufferSource();  // for the instance of AudioBufferSourceNode\n        this.buffer = null;                          // for the instance of AudioBuffer\n\n        this.currentTime = 0;\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.source.playbackRate.minValue || 0;\n                    max = this.source.playbackRate.maxValue || 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.stop();\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of AudioBuffer from ArrayBuffer.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of ArrayBuffer.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            const startTime = this.context.currentTime;\n\n            const pos = parseFloat(position);\n\n            this.currentTime = ((pos >= 0) && (pos <= this.buffer.duration)) ? pos : 0;\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n\n            // AudioBufferSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.source.start(startTime, pos, (this.buffer.duration - pos));\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.on(startTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.buffer.duration)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            const index = Math.floor(this.currentTime * this.source.buffer.sampleRate);\n                            const n100msec = 0.100 * this.source.buffer.sampleRate;\n\n                            // Invoke callback every 100 msec\n                            if ((index % n100msec) === 0) {\n                                this.callbacks.update(this.source, this.currentTime);\n                            }\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.currentTime = 0;\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime, true);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop onaudioprocess event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of AudioBufferSourceNode.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(position, connects, processCallback) {\n        if (this.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of AudioBuffer exists.\n     * @return {boolean} If the instance of AudioBuffer already exists, this value is true. Otherwise, this value is false.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of AudioBufferSourceNode exists.\n     * @return {boolean} If the instance of AudioBufferSourceNode already exists, this value is true. Otherwise, this value is false.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is true. Otherwise, this value is false.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.source.playbackRate.value,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AudioModule/index.js","'use strict';\n\nimport AudioModule from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from HTMLMediaElement .\n * Namely, this class creates audio player that has higher features from HTMLMediaElement.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use OneshotModule.\n * @constructor\n * @extends {AudioModule}\n */\nexport default class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = null;  // for the instance of MediaElementAudioSourceNode\n        this.media  = null;  // for the instance of HTMLMediaElement\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.duration     = 0;\n        this.playbackRate = 1.0;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n\n        // The keys are the event interfaces that are defined by HTMLMediaElement.\n        // For example, \"loadstart\", \"loadedmetadata\", \"loadeddata\", \"canplay\", \"canplaythrough\", \"timeupdate\", \"ended\" ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets HTMLMediaElement and selects media format. In addition, this method adds event listeners that are defined by HTMLMediaElement.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either HTMLAudioElement or HTMLVideoElement.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by HTMLMediaElement.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (this.ext === '') {\n            throw new Error('Media format that can be played does not exist.');\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of MediaElementAudioSourceNode again causes error to occur.\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('loadedmetadata', event => {\n            this.duration = this.media.duration;\n\n            if ('loadedmetadata' in this.listeners) {\n                this.listeners.loadedmetadata(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop onaudioprocess event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.duration;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or Data URL or Object URL for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // Data URL or Object URL ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1)) {\n                this.media.src = src;  // Data URL or Object URL\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.media.play();\n\n            const pos = parseFloat(position);\n\n            this.media.currentTime  = ((pos >= 0) && (pos <= this.duration)) ? pos : 0;\n            this.media.playbackRate = this.playbackRate;\n            this.media.controls     = this.controls;\n            this.media.loop         = this.loop;\n            this.media.muted        = this.muted;\n\n            this.on(this.context.currentTime);\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                        outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            this.media.pause();\n\n            this.off(this.context.currentTime, true);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop onaudioprocess event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of MediaElementAudioSourceNode.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media instanceof HTMLMediaElement) {\n            if (this.media.paused) {\n                this.start(position, connects, processCallback);\n            } else {\n                this.stop();\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of HTMLMediaElement exists.\n     * @return {boolean} If the instance of HTMLMediaElement already exists, this value is true. Otherwise, this value is false.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of MediaElementAudioSourceNode exists.\n     * @return {boolean} If the instance of MediaElementAudioSourceNode already exists, this value is true. Otherwise, this value is false.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is true. Otherwise, this value is false.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/MediaModule/index.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport NoiseGate from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        // for the instance of MediaStreamAudioSourceNode\n        this.source = null;\n\n        // for navigator.mediaDevices.getUserMedia\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.isStop  = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for getUserMedia.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {this.callbacks.stream = streamCallback;}\n        if (Object.prototype.toString.call(errorCallback)  === '[object Function]') {this.callbacks.error  = errorCallback;}\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop onaudioprocess event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of MediaStreamAudioSourceNode.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is true. Otherwise, this value is false.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StreamModule/index.js","'use strict';\n\nimport SoundModule from './SoundModule';\nimport OscillatorModule from './OscillatorModule';\nimport OneshotModule from './OneshotModule';\nimport AudioModule from './AudioModule';\nimport MediaModule from './MediaModule';\nimport StreamModule from './StreamModule';\nimport MixerModule from './MixerModule';\nimport MIDI from './MIDI';\nimport MML from './MML';\nimport { read, file, ajax, decode, toFrequencies, convertTime, fullscreen, exitFullscreen } from './XSound';\n\n// Chrome, Opera, Firefox (Mac / Windows), Safari (Mac), Edge (Windows)\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n// Global constant for determining whether it is possible to use Web Audio API.\nconst IS_XSOUND = Boolean(window.AudioContext);\n\nconst audiocontext = new AudioContext();\n\n// for legacy browsers\naudiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\naudiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\naudiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\naudiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\nconst sources = {\n    'oscillator' : new OscillatorModule(audiocontext),\n    'oneshot'    : new OneshotModule(audiocontext),\n    'audio'      : new AudioModule(audiocontext),\n    'media'      : new MediaModule(audiocontext),\n    'stream'     : new StreamModule(audiocontext),\n    'mixer'      : new MixerModule(audiocontext),\n    'midi'       : new MIDI(audiocontext),\n    'mml'        : new MML(audiocontext)\n};\n\n/**\n * This function is global object for getting the instance of OscillatorModule or Oscillator or OneshotModule or AudioModule or MediaModule or StreamModule or MixerModule or MIDI or MML.\n * @param {string} source This argument is one of 'oscillator', 'oneshot', 'audio', 'media', 'fallback', 'stream', 'mixer', 'midi', 'mml'.\n * @param {number} index This argument is in order to select one of some oscillators.\n * @return {OscillatorModule|Oscillator|OneshotModule|AudioModule|MediaModule|StreamModule|MixerModule|MIDI|MML}\n */\nconst XSound = (source, index) => {\n    const s = String(source).replace(/-/g, '').toLowerCase();\n\n    switch (s) {\n        case 'oscillator':\n            if (index === undefined) {\n                return sources.oscillator;\n            }\n\n            const i = parseInt(index, 10);\n\n            if ((i >= 0) && (i < sources.oscillator.length())) {\n                return sources.oscillator.get(i);\n            }\n\n            break;\n        case 'oneshot':\n        case 'audio'  :\n        case 'media'  :\n        case 'stream' :\n        case 'mixer'  :\n        case 'midi'   :\n        case 'mml'    :\n            return sources[s];\n        default :\n            break;\n    }\n};\n\n/**\n * Class (Static) properties\n */\nXSound.IS_XSOUND         = IS_XSOUND;\nXSound.SAMPLE_RATE       = audiocontext.sampleRate\nXSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\nXSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\nXSound.read              = read;\nXSound.file              = file;\nXSound.ajax              = ajax;\nXSound.decode            = decode;\nXSound.toFrequencies     = toFrequencies;\nXSound.convertTime       = convertTime;\nXSound.fullscreen        = fullscreen;\nXSound.exitFullscreen    = exitFullscreen;\n\n/**\n * This class (static) method returns function as closure that is getter of cloned module.\n * @return {function} This is returned as closure that is getter of cloned module.\n */\nXSound.clone = () => {\n    const clones = {\n        'oscillator': new OscillatorModule(audiocontext),\n        'oneshot'   : new OneshotModule(audiocontext),\n        'audio'     : new AudioModule(audiocontext),\n        'media'     : new MediaModule(audiocontext),\n        'stream'    : new StreamModule(audiocontext),\n        'mixer'     : new MixerModule(audiocontext),\n        'midi'      : new MIDI(audiocontext),\n        'mml'       : new MML(audiocontext)\n    };\n\n    const C = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return clones.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < clones.oscillator.length())) {\n                    return clones.oscillator.get(i);\n                }\n\n                break;\n            case 'oneshot':\n            case 'audio'  :\n            case 'media'  :\n            case 'stream' :\n            case 'mixer'  :\n            case 'midi'   :\n            case 'mml'    :\n                return clones[s];\n            default :\n                break;\n        }\n    };\n\n    C.free  = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in clones) {\n                if (source === clones[key]) {\n                    clones[key] = null;\n                }\n            }\n        }\n    };\n\n    // Closure\n    return C;\n};\n\n/**\n * This class (static) method releases memory of unnecessary instances.\n * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of SoundModule or MIDI or MML.\n */\nXSound.free = sourceList => {\n    if (!Array.isArray(sourceList)) {\n        sourceList = [sourceList];\n    }\n\n    for (const source of sourceList) {\n        // Already deleted ?\n        if (source === null) {\n            continue;\n        }\n\n        for (const key in sources) {\n            if (source === sources[key]) {\n                sources[key] = null;\n            }\n        }\n    }\n};\n\n/**\n * This class (static) method removes one of the global objects or both of the global objects.\n * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n *     If this value is true, both of global objects are removed.\n * @return {XSound}\n */\nXSound.noConflict = deep => {\n    if (window.X === XSound) {\n        window.X = undefined;\n    }\n\n    // both of global objects are removed ?\n    if (deep && (window.XSound === XSound)) {\n        window.XSound = undefined;\n    }\n\n    return XSound;\n};\n\n/**\n * This class (static) method gets the instance of AudioContext.\n * @return {AudioContext}\n */\nXSound.get = () => {\n    return audiocontext;\n};\n\n/**\n * This class (static) method gets \"currentTime\" property in the instance of AudioContext.\n * @return {number}\n */\nXSound.getCurrentTime = () => {\n    return audiocontext.currentTime;\n};\n\n/** @override */\nXSound.toString = () => {\n    return '[XSound]';\n};\n\n// Export\nwindow.XSound = XSound;\nwindow.X      = XSound;  // Alias of XSound\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","'use strict';\n\nimport TimeOverview from './TimeOverview';\nimport Time from './Time';\nimport FFT from './FFT';\n\n/**\n * This private class manages 4 private classes (Visualizer, TimeOverview, Time, FFT) for drawing sound wave.\n * @constructor\n */\nexport default class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n        this.output   = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode -> GainNode (Output)\n        this.input.connect(this.analyser);\n        this.analyser.connect(this.output);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of AudioBuffer. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method gets the instance of AnalyserNode.\n     * @return {AnalyserNode} This value is the instance of AnalyserNode.\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/index.js","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class TimeOverview extends Visualizer {\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for TimeOverview#update, TimeOverview#drag\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(255, 255, 255, 1.0)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                      // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                          // Draw text at intervals of this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of \"this.plotInterval\"\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of \"this.textInterval\"\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for TimeOverview.prototype.update, TimeOverview.prototype.drag\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of \"this.plotInterval\"\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of \"this.textInterval\"\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.setAttribute('class',  'svg-current-time');\n        rect.setAttribute('x',      this.styles.left);\n        rect.setAttribute('y',      this.styles.top);\n        rect.setAttribute('width',  1);\n        rect.setAttribute('height', innerHeight);\n\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill',   this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for TimeOverview.prototype.update, TimeOverview.prototype.drag\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth) + this.styles.left;\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n                    context.fillRect(x, this.styles.top, 1, innerHeight);\n                }\n\n                break;\n            case Visualizer.SVG:\n                const svg = this.svg.querySelector('.svg-current-time');\n\n                if (svg instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    svg.setAttribute('transform', `translate(${x} 0)`);\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return;\n        }\n\n        let isDown = false;\n\n        drawNode.addEventListener(start, event => {\n            this.draw(this.getOffsetX(event), callback);\n            isDown = true;\n        }, true);\n\n        drawNode.addEventListener(move, event => {\n            if (isDown) {\n                event.preventDefault();  // for Touch Panel\n                this.draw(this.getOffsetX(event), callback);\n            }\n        }, true);\n\n        window.addEventListener(end, () => {\n            if (isDown) {\n                isDown = false;\n            }\n        }, true);\n\n        return this;\n    }\n\n    draw(offsetX, callback) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        this.update(time);\n\n        if (Object.prototype.toString.call(callback) === '[object Function]') {\n            callback(time);\n        }\n    }\n\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        } else if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n    }\n\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/TimeOverview.js","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (Uint8Array) or float 32 bit (Float32Array)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of \"this.textInterval\"\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((0.5 - (data[i] / 255)) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of \"this.textInterval\"\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor(((data[i] / 255) - 0.5) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/Time.js","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport default class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (Uint8Array) or float 32 bit (Float32Array)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // AnalyserNode#fftSize max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of \"this.textInterval\"\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * Math.floor((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of \"this.textInterval\"\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/FFT.js","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport default class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     * @param {number} numInput This argument is the number of inputs for ScriptProcessorNode.\n     * @param {number} numOutput This argument the number of outputs for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;      // There is not any active track in the case of -1\n        this.paused      = true;    // for preventing from the duplicate onaudioprocess event (\"start\" method)\n\n        this.gainL = 1;  // Gain of L channel\n        this.gainR = 1;  // Gain of R channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        this.processor.disconnect(0);  // Stop onaudioprocess event\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is true. Otherwise, this value is false.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * this.processor.bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * this.processor.bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (this.processor.bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @return {string} This is returned as Object URL or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else {\n            if (this.isTrack(track)) {\n                soundLs = this.trackLs[track - 1];\n                soundRs = this.trackRs[track - 1];\n            }\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return;\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        if (window.URL && window.URL.createObjectURL) {\n            // Object URL\n\n            const waves = [];\n\n            waves[0] = 0x52;  // 'R'\n            waves[1] = 0x49;  // 'I'\n            waves[2] = 0x46;  // 'F'\n            waves[3] = 0x46;  // 'F'\n\n            waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n            waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n            waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n            waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n            waves[8]  = 0x57;  // 'W'\n            waves[9]  = 0x41;  // 'A'\n            waves[10] = 0x56;  // 'V'\n            waves[11] = 0x45;  // 'E'\n\n            // fmt chunk\n            waves[12] = 0x66;  // 'f'\n            waves[13] = 0x6D;  // 'm'\n            waves[14] = 0x74;  // 't'\n            waves[15] = 0x20;  // ' '\n\n            waves[16] = 16;\n            waves[17] =  0;\n            waves[18] =  0;\n            waves[19] =  0;\n\n            waves[20] = 1;\n            waves[21] = 0;\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            waves[22] = CHANNEL;\n            waves[23] = 0;\n\n            // fmt chunk -> Sample rate\n            waves[24] = (RATE >>  0) & 0xFF;\n            waves[25] = (RATE >>  8) & 0xFF;\n            waves[26] = (RATE >> 16) & 0xFF;\n            waves[27] = (RATE >> 24) & 0xFF;\n\n            // fmt chunk -> Byte per second\n            waves[28] = (BPS >>  0) & 0xFF;\n            waves[29] = (BPS >>  8) & 0xFF;\n            waves[30] = (BPS >> 16) & 0xFF;\n            waves[31] = (BPS >> 24) & 0xFF;\n\n            // fmt chunk -> Block size\n            waves[32] = CHANNEL * (QBIT / 8);\n            waves[33] = 0;\n\n            // fmt chunk -> Byte per Sample\n            waves[34] = QBIT;\n            waves[35] = 0;\n\n            // data chunk\n            waves[36] = 0x64;  // 'd'\n            waves[37] = 0x61;  // 'a'\n            waves[38] = 0x74;  // 't\n            waves[39] = 0x61;  // 'a'\n\n            waves[40] = (DATA_SIZE >>  0) & 0xFF;\n            waves[41] = (DATA_SIZE >>  8) & 0xFF;\n            waves[42] = (DATA_SIZE >> 16) & 0xFF;\n            waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const blob      = new Blob([new Uint8Array(waves)], {'type': 'audio/wav'});\n            const objectURL = window.URL.createObjectURL(blob);\n\n            return objectURL;\n        } else {\n            // Data URL\n\n            let wave = '';\n\n            wave += 'RIFF';\n            wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n            wave += 'WAVE';\n\n            // fmt chunk\n            wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n            wave += String.fromCharCode(1, 0);\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            wave += String.fromCharCode(CHANNEL, 0);\n\n            // fmt chunk -> Sample rate\n            wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n            // fmt chunk -> Byte per second\n            wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n            // fmt chunk -> Block size\n            wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n            // fmt chunk -> Byte per Sample\n            wave += String.fromCharCode(QBIT, 0);\n\n            // data chunk\n            wave += 'data';\n            wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        wave += String.fromCharCode(sounds[i]);\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const base64  = window.btoa(wave);\n            const dataURL = `data:audio/wav;base64,${base64}`;\n\n            return dataURL;\n        }\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Recorder.js","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport default class Session {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     * @param {number} numberOfInputs This argument is the number of inputs for ScriptProcessorNode.\n     * @param {number} numberOfOutputs This argument the number of outputs for ScriptProcessorNode.\n     * @param {Analyser} analyser This argument is the instance of Analyser.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of Analyser\n\n        this.sender   = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of WebSocket\n        this.paused    = true;  // for preventing from  the duplicate onaudioprocess event (\"start\" method)\n    }\n\n    /**\n     * This method creates the instance of WebSocket and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either 'wss' or 'ws').\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as \"onopen\" event handler in the instance of WebSocket.\n     * @param {function} closeCallback This argument is invoked as \"onclose\" event handler in the instance of WebSocket.\n     * @param {function} errorCallback This argument is invoked as \"onerror\" event handler in the instance of WebSocket.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser -> AudioDestinationNode (Output)\n            this.receiver.connect(this.analyser.input);\n            this.analyser.output.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffers = new Float32Array(2 * bufferSize);\n                    const offset  = parseInt((buffers.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffers[i]          = inputLs[i];\n                        buffers[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffers);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of WebSocket.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is true. Otherwise, this value is false.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of WebSocket.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Session.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // Compressor is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = this.compressor[k].minValue || minValues[k];\n                const max = this.compressor[k].maxValue || maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Compressor.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    /**\n     * This class (static) method creates the instance of Float32Array for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of Float32Array.\n     * @return {Float32Array|null} This is \"curve\" property in WaveShaperNode.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // Distortion is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    const AMOUNTS = {\n                        'CLEAN'      : 0.0,\n                        'CRUNCH'     : 0.5,\n                        'OVERDRIVE'  : 0.7,\n                        'DISTORTION' : 0.8,\n                        'FUZZ'       : 0.9\n                    };\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.drive.gain.minValue || 0;\n                    max = this.drive.gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this[k].frequency.minValue || 10;\n                    max = this[k].frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toStringdt() {\n        return '[SoundModule Distortion]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Distortion.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // Wah is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.lowpass.frequency.minValue || 10;\n                    max = this.lowpass.frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.lowpass.Q.minValue || 0.0001;\n                    max = this.lowpass.Q.maxValue || 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Wah.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // Equalizer is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    const v   = parseFloat(value);\n                    const min = this[k].gain.minValue || -40;\n                    const max = this[k].gain.maxValue ||  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Equalizer.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Filter extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between this.maxFrequency * 0.1 and this.maxFrequency\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // Filter is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    // for legacy browsers\n                    const FILTER_TYPES = {\n                        'lowpass'   : this.filter.LOWPASS   || 0,\n                        'highpass'  : this.filter.HIGHPASS  || 1,\n                        'bandpass'  : this.filter.BANDPASS  || 2,\n                        'lowshelf'  : this.filter.LOWSHELF  || 3,\n                        'highshelf' : this.filter.HIGHSHELF || 4,\n                        'peaking'   : this.filter.PEAKING   || 5,\n                        'notch'     : this.filter.NOTCH     || 6,\n                        'allpass'   : this.filter.ALLPASS   || 7\n                    };\n\n                    v = String(value).toLowerCase();\n\n                    if (v in FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.filter.frequency.minValue || 10;\n                    max = this.filter.frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.filter.gain.minValue || -40;\n                    max = this.filter.gain.maxValue ||  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.filter.Q.minValue || 0.0001;\n                    max = this.filter.Q.maxValue || 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        } else if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Filter.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // Autopanner is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.depth.gain.minValue || 0;\n                    max = this.depth.gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Autopanner.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // AutopannerFallback is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.depth.gain.minValue || 0;\n                    max = this.depth.gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop onaudioprocess event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/AutopannerFallback.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Tremolo extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // Tremolo is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.depth.gain.minValue || 0;\n                    max = this.depth.gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    // for legacy browsers\n                    const WAVE_TYPE = {\n                        'sine'     : this.lfo.SINE     || 0,\n                        'square'   : this.lfo.SQUARE   || 1,\n                        'sawtooth' : this.lfo.SAWTOOTH || 2,\n                        'triangle' : this.lfo.TRIANGLE || 3\n                    };\n\n                    v = String(value).toLowerCase();\n\n                    if (v in WAVE_TYPE) {\n                        this.lfo.type = (this.lfo.type === 'string') ? v : WAVE_TYPE[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Tremolo.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // Ring Modulator is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.depth.gain.minValue || 0;\n                    max = this.depth.gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Ringmodulator.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // Phaser is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.filters[0].frequency.minValue || 10;\n                    max = this.filters[0].frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.filters[0].Q.minValue || 0.0001;\n                    max = this.filters[0].Q.maxValue || 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this[k].gain.minValue || 0;\n                    max = this[k].gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Phaser.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // Flanger is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.delay.delayTime.minValue || 0;\n                    max = this.delay.delayTime.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this[k].gain.minValue || 0;\n                    max = this[k].gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.tone.frequency.minValue || 10;\n                    max = this.tone.frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Flanger.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // Chorus is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.delay.delayTime.minValue || 0;\n                    max = this.delay.delayTime.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.rate.minValue || 0;\n                    max = this.rate.maxValue || 100000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this[k].gain.minValue || 0;\n                    max = this[k].gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.tone.frequency.minValue || 10;\n                    max = this.tone.frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Chorus.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // Delay is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.delay.delayTime.minValue || 0;\n                    max = this.delay.delayTime.maxValue || Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this[k].gain.minValue || 0;\n                    max = this[k].gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.tone.frequency.minValue || 10;\n                    max = this.tone.frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Delay.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number|AudioBuffer} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // Reverb is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If \"buffer\" in ConvolverNode is null after setting the instance of AudioBuffer, Reverb is not OFF.\n                        // Therefore, Reverb is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this[k].gain.minValue || 0;\n                    max = this[k].gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.tone.frequency.minValue || 10;\n                    max = this.tone.frequency.maxValue || (this.context.sampleRate / 2);\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of AudioBuffer to ConvolverNode.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of AudioBuffer or ArrayBuffer for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of AudioBuffer by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of AudioBuffer for Impulse Response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating AudioBuffers was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of XMLHttpRequest.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get ArrayBuffer by Ajax -> Create the instances of AudioBuffer\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of AudioBuffer has completed ?\n                        for (let i = 0, len = self.rirs.length; i < len; i++) {\n                            if (self.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of AudioBuffer from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of AudioBuffer directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        } else if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Reverb.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Panner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for ScriptProcessorNode.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { x : 0, y : 0, z : 0 };\n        this.orientations = { x : 1, y : 0, z : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n\n        // Panner is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n                        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if (value === undefined) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    const PANNING_MODELS = {\n                        'equalpower': this.panner.EQUALPOWER || 0,\n                        'HRTF'      : this.panner.HRTF       || 1\n                    };\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    const DISTANCE_MODELS = {\n                        'linear'     : this.panner.LINEAR_DISTANCE      || 0,\n                        'inverse'    : this.panner.INVERSE_DISTANCE     || 1,\n                        'exponential': this.panner.EXPONENTIAL_DISTANCE || 2\n                    };\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Panner.js","'use strict';\n\n/**\n * This private class defines property for audio listener.\n * These properties relate to properties of PannerNode.\n * @constructor\n */\nexport default class Listener {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        // the instance of AudioListener\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { x : 0, y : 0, z : 0 };\n        this.fronts    = { x : 0, y : 0, z : -1 };\n        this.ups       = { x : 0, y : 1, z : 0 };\n\n        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.fronts[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.fronts[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'positions' : this.positions,\n            'fronts'    : this.fronts,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Listener.js","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport default class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for GainNode\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of AudioNode.\n     * @param {number} index This argument is in order to select the instance of GainNode that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of AudioNode as input.\n     * @param {AudioNode} output This argument is the instance of AudioNode as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        input.connect(this.generators[i]);\n        this.generators[i].connect(output);\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from gain.value = 0\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : gain.value increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : gain.value gradually decreases to value of sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n            this.generators[activeIndex].gain.setValueAtTime(this.generators[activeIndex].gain.value, t3);\n\n            // Release : gain.value gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of GainNode for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of GainNode for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of GainNode for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of GainNode for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of GainNode for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is true. Otherwise, this value is false.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            } else {\n                counter++;\n\n                // the all of schedulings are stopped ?\n                if (counter === this.activeCounter) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of GainNode.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect AudioNode.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/EnvelopeGenerator.js","'use strict';\n\n/**\n * This private class defines properties for the instance of OscillatorNode.\n * @constructor\n */\nexport default class Oscillator {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate \"start\" or \"stop\"  method in the instance of OscillatorNode\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const OCTAVE = 1200;  // 1 Octave = 1200 cent\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        // for legacy browsers\n                        const WAVE_TYPE = {\n                            'sine'     : this.source.SINE     || 0,\n                            'square'   : this.source.SQUARE   || 1,\n                            'sawtooth' : this.source.SAWTOOTH || 2,\n                            'triangle' : this.source.TRIANGLE || 3\n                        };\n\n                        v = String(value).toLowerCase();\n\n                        if (v in WAVE_TYPE) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : WAVE_TYPE[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = (this.source.detune.minValue || -4800) / OCTAVE;\n                    max = (this.source.detune.maxValue ||  4800) / OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -OCTAVE;\n                    max =  OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = this.volume.gain.minValue || 0;\n                    max = this.volume.gain.maxValue || 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of AudioNode as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            }\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        } else if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of OscillatorNode.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OscillatorModule/Oscillator.js","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport default class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEARY) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of OscillatorNode.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OscillatorModule/Glide.js","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport default class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AudioModule/VocalCanceler.js","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport default class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        if (d > this.level) {\n            // The amplitude is equal to argument.\n            return data;\n        } else {\n            // Because signal is detected as background noise, the amplitude is 0.\n            return 0;\n        }\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StreamModule/NoiseGate.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\nimport AudioModule from '../AudioModule';\nimport MediaModule from '../MediaModule';\nimport StreamModule from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources  that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>}|Array.<StreamModule> */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop onaudioprocess event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule>|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        if ((i >= 0) && (i < this.sources.length)) {\n            return this.sources[i];\n        } else {\n            return this.sources;\n        }\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/MixerModule/index.js","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport default class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of MIDIAccess\n        this.inputs     = [];    // for the instances of MIDIInput\n        this.outputs    = [];    // for the instances of MIDIOutput\n    }\n\n    /**\n     * This method invokes requestMIDIAccess and gets objects for using Web MIDI API.\n     * @param {function} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when requestMIDIAccess succeeds.\n     * @param {function} errorCallback This argument is invoked when requestMIDIAccess fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of MIDIAccess.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/MIDI/index.js","'use strict';\n\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport default class MML {\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C': index =  3; break;\n            case 'D': index =  5; break;\n            case 'E': index =  7; break;\n            case 'F': index =  8; break;\n            case 'G': index = 10; break;\n            case 'A': index = 12; break;\n            case 'B': index = 14; break;\n            case 'R': return 'R';\n            default : break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        if (computedIndex >= 0) {\n            return computedIndex;\n        } else {\n            return -1;\n        }\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => {\n        // The 12 equal temperament\n        //\n        // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n        //\n        // A * 1.059463 -> A# (half up)\n\n        const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n        const MIN_A           = 27.5;\n\n        if (index >= 0) {\n            return MIN_A * Math.pow(FREQUENCY_RATIO, index);\n        } else {\n            return -1;\n        }\n    };\n\n    /**\n     * This class (static) method converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    static toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of OscillatorNode or OscillatorModule or OneshotModule\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls) {\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note;\n            let octave;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === undefined) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === undefined) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== 'R') ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // \"start\" method gets element by \"pop\" for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== 'R') {\n                        this.source.start(sequence.indexes[i], connects, processCallback);\n                    }\n\n                    this.callbacks.start(sequence, i);\n                }\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.start(sequence, i);\n                    }\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.stop(sequence, i);\n                    }\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== 'R') {\n                            this.source.stop(sequence.indexes[i], processCallback);\n                        }\n\n                        this.callbacks.stop(sequence, i);\n                    }\n                }\n\n                // for MML.prototype.stop\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== 'R') {\n                    this.source.stop(index, processCallback);\n                }\n\n                this.callbacks.stop(sequence, index);\n            }\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        if ((i >= 0) && (i < this.sequences.length)) {\n            return this.sequences[i];\n        } else {\n            return this.sequences;\n        }\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change \"onaudioprocess\" event handler in the instance of ScriptProcessorNode.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is true. Otherwise, this value is false.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is true. Otherwise, this value is false.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method creates text file for MML.\n     * @param {string} mml This argument is MML string.\n     * @return {string} This is returned as text file that MML is written.\n     */\n    create(mml) {\n        const base64  = window.btoa(MML.toAscii(String(mml)));\n        const dataURL = `data:text/plain;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/MML/index.js","'use strict';\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of Blob. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as \"onprogress\" event handler in the instance of FileReader.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape <script> in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method gets the instance of File (extends Blob).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or \"<input type=\"file\">\".\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as \"onprogress\" event handler in the instance of FileReader.\n * @return {File} This is returned as the instance of File (extends Blob).\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of File (extends Blob)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /*('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // <input type=\"file\">\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method gets audio data as ArrayBuffer by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if (xhr.status === 200) {\n            const arrayBuffer = xhr.response;\n\n            if ((arrayBuffer instanceof ArrayBuffer) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n                successCallback(event, arrayBuffer);\n            }\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n    xhr.send(null);\n}\n\n/**\n * This class (static) method creates the instance of AudioBuffer from ArrayBuffer.\n * @param {AudioContext} context This argument is the instance of AudioContext for \"decodeAudioData\" method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of AudioBuffer.\n * @param {function} successCallback This argument is invoked when \"decodeAudioData\" method is successful.\n       The 1st argument in this callback function is the instance of AudioBuffer.\n * @param {function} errorCallback This argument is invoked when \"decodeAudioData\" method failed.\n * @return {Promise} This is returned as Promise.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains \"minutes\", \"seconds\" and \"milliseconds\" keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method shows the designated Element in full screen.\n * @param {Element} element This argument is the instance of Element that is the target of full screen.\n */\nexport function fullscreen(element) {\n    if (!(element instanceof Element)) {\n        return;\n    }\n\n    if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else {\n        throw new Error('Cannot change to full screen.');\n    }\n}\n\n/**\n * This class (static) method shows Element in original size from full screen.\n */\nexport function exitFullscreen() {\n    if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n    } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else {\n        throw new Error('Cannot exit from full screen.');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/XSound/index.js"],"sourceRoot":""}